-module($MODULENAME).

-behaviour(proper_statem).

-include_lib("proper/include/proper.hrl").

-export([
  test/0,
  sample/0
]).

-export([
  initial_state/0,
  command/1,
  precondition/2,
  postcondition/3,
  next_state/3
]).

-record(state, {}).

-define(SERVER, foo_server).


%% -------------------------------------------------------------------
%% Statemachine callbacks
%% -------------------------------------------------------------------

test() ->
  proper:quickcheck(?MODULE:prop_server_works_fine()).

sample() ->
  proper_gen:pick(commands(?MODULE)).

prop_server_works_fine() ->
  ?FORALL(Cmds, commands(?MODULE), ?TRAPEXIT(
      begin
      ?SERVER:start_link(),
      {History,State,Result} = run_commands(?MODULE, Cmds), ?SERVER:stop(),
          ?WHENFAIL(io:format("History: ~w\nState: ~w\nResult: ~w\n",
          [History,State,Result]),
          aggregate(command_names(Cmds), Result =:= ok))
          end)).

initial_state() ->
  #state{}.

command(_S) -> [].

precondition(_S, _Call) -> true.

next_state(_S, _Res, _Call) -> true.

postcondition(_S, _Call, _Res) -> true.


%% -------------------------------------------------------------------
%% Internal functions
%% -------------------------------------------------------------------
